version: 2.1

defaults: &nodeEnv
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      test:
        type: string
        default: none 
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack udaPeople-Backend-$CIRCLE_WORKFLOW_ID
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws cloudformation delete-stack udaPeople-Frontend-$CIRCLE_WORKFLOW_ID

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      test:
        type: string
        default: none    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    <<: *nodeEnv
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm i
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *nodeEnv
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
           root: ~/
           paths:
              - project/backend/dist

  test-frontend:
    <<: *nodeEnv
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test
#      - save_cache:
#          paths: [ frontend/node_modules ]
#          key: frontend-test
                
  test-backend:
    <<: *nodeEnv
    steps:
      - checkout
      - restore_cache:
         keys: [ backend-build ]
      - run:
          name: Backend test
          command: |
            cd backend
            npm i
            npm run test
#      - save_cache:
#            paths: [ backend/node_modules ]
#            key: backend-test
            
  scan-frontend:
    <<: *nodeEnv
    steps:
    - checkout
    - restore_cache:
        keys: [ backend-build ]
    - run:
        name: Frontend scan
        command: |
          cd frontend
          npm i
          npm audit fix --audit-level=critical --force

  scan-backend:
    <<: *nodeEnv
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
#      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=hhUdaPeopleBE \
            --stack-name "udaPeople-Backend-$CIRCLE_WORKFLOW_ID" \
            --parameter-overrides ID=$CIRCLE_WORKFLOW_ID
      - run:
          name: get backend public-ip
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID --output text > backend-host
            echo BackenIP: "$(<backend-host)"
            curl -H "Content-Type: text/plain" -H "token: e14ce597-d428-4f67-acb8-27c8e10191ca" --request PUT --data @backend-host  https://api.memstash.io/values/url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=hhUdaPeopleFE \
            --stack-name "udaPeople-Frontend-$CIRCLE_WORKFLOW_ID" \
            --parameter-overrides ID=$CIRCLE_WORKFLOW_ID
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            echo [web]  > inventory.txt
            curl -H "token: e14ce597-d428-4f67-acb8-27c8e10191ca" --request GET https://api.memstash.io/values/url >> inventory.txt
            yum install -y tar
            yum install -y gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
     # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:c6:27:51:f1:fc:09:3e:bb:cc:1c:b8:4b:91:d6:0e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    <<: *nodeEnv
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations | tee migrating.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -Fxq "Migration AddEmployee1555722583168 has been executed successfully" output.txt;
            then
            curl -H "Content-Type: text/plain" -H "token: b994e046-2a53-4a93-80cf-feb669a7ec9b" --request PUT --data "1" https://api.memstash.io/values/success;
            else
            curl -H "Content-Type: text/plain" -H "token: b994e046-2a53-4a93-80cf-feb669a7ec9b" --request PUT --data "0" https://api.memstash.io/values/success;
            fi
#      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
           name: Install dependencies
           command: |
             apk add --update ansible
             curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
             yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: e14ce597-d428-4f67-acb8-27c8e10191ca" --request GET https://api.memstash.io/values/url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-$CIRCLE_WORKFLOW_ID/ --recursive
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:c6:27:51:f1:fc:09:3e:bb:cc:1c:b8:4b:91:d6:0e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs nodejs-npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            pwd
            ls -l
            ansible-playbook -i ../.circleci/ansible/inventory.txt ../.circleci/ansible/deploy-backend.yml

      # Here's where you will add some code to rollback on failure
#  smoke-test:
#    docker:
      # Lightweight Docker image 
#    steps:
      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#      - run:
#          name: Get backend url
#          command: |
            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#  cloudfront-update:
#    docker:
      # Docker image here that supports AWS CLI
#    steps:
      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
#    docker:
      # Docker image here
#    steps:
      # Checkout code from git
 #     - run:
#          name: Get old stack workflow id
#          command: |
            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
              # your code here
#            fi
            

workflows:
  default:
    jobs:
 #     - build-frontend
 #     - build-backend
 #     - test-frontend:
 #         requires: [build-frontend]
 #     - test-backend:
 #         requires: [build-backend]
 #     - scan-backend:
 #         requires: [build-backend]
 #     - scan-frontend:
 #         requires: [build-frontend]
 #       - deploy-infrastructure:
 #           #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
 #           filters:
 #             branches:
 #               only: [main]
 #       - configure-infrastructure:
 #           requires: [deploy-infrastructure]
 #       - run-migrations:
 #           requires: [configure-infrastructure]
 #       - deploy-frontend:
 #           requires: [run-migrations]
        - deploy-backend
 #           requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
#